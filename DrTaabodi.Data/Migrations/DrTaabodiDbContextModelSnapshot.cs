// <auto-generated />
using System;
using DrTaabodi.Data.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DrTaabodi.Data.Migrations
{
    [DbContext(typeof(DrTaabodiDbContext))]
    partial class DrTaabodiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DrTaabodi.Data.Models.PostCategoryTbl", b =>
                {
                    b.Property<Guid>("PostCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostCategoryTblPostCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedData")
                        .HasColumnType("datetime2");

                    b.HasKey("PostCategoryId");

                    b.HasIndex("PostCategoryTblPostCategoryId");

                    b.ToTable("PostCategoryTbl");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.PostTypeTbl", b =>
                {
                    b.Property<Guid>("PostTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PostTypeTblPostTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedData")
                        .HasColumnType("datetime2");

                    b.HasKey("PostTypeId");

                    b.HasIndex("PostTypeTblPostTypeId");

                    b.ToTable("PostTypeTbl");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.PstTbl", b =>
                {
                    b.Property<Guid>("PstId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PstContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PstDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PstTblPstId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PstTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedData")
                        .HasColumnType("datetime2");

                    b.HasKey("PstId");

                    b.HasIndex("PstTblPstId");

                    b.ToTable("PstTbl");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.QnATbl", b =>
                {
                    b.Property<Guid>("QnAId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedData")
                        .HasColumnType("datetime2");

                    b.HasKey("QnAId");

                    b.ToTable("QnATbl");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.UsrTbl", b =>
                {
                    b.Property<Guid>("UsrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassCode")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedData")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UsrEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsrFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsrNickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsrStatus")
                        .HasColumnType("int");

                    b.HasKey("UsrId");

                    b.ToTable("UsrTbl");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PostCategoryTblPstTbl", b =>
                {
                    b.Property<Guid>("PostCategoryTablePostCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostTablePstId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostCategoryTablePostCategoryId", "PostTablePstId");

                    b.HasIndex("PostTablePstId");

                    b.ToTable("PostCategoryTblPstTbl");
                });

            modelBuilder.Entity("PostTypeTblPstTbl", b =>
                {
                    b.Property<Guid>("PostTablePstId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostTypeTablePostTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostTablePstId", "PostTypeTablePostTypeId");

                    b.HasIndex("PostTypeTablePostTypeId");

                    b.ToTable("PostTypeTblPstTbl");
                });

            modelBuilder.Entity("PstTblUsrTbl", b =>
                {
                    b.Property<Guid>("PostTablePstId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTableUsrId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostTablePstId", "UserTableUsrId");

                    b.HasIndex("UserTableUsrId");

                    b.ToTable("PstTblUsrTbl");
                });

            modelBuilder.Entity("QnATblUsrTbl", b =>
                {
                    b.Property<Guid>("QuestionAndAnswerTableQnAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTableUsrId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionAndAnswerTableQnAId", "UserTableUsrId");

                    b.HasIndex("UserTableUsrId");

                    b.ToTable("QnATblUsrTbl");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.PostCategoryTbl", b =>
                {
                    b.HasOne("DrTaabodi.Data.Models.PostCategoryTbl", null)
                        .WithMany("PostCategoryParent")
                        .HasForeignKey("PostCategoryTblPostCategoryId");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.PostTypeTbl", b =>
                {
                    b.HasOne("DrTaabodi.Data.Models.PostTypeTbl", null)
                        .WithMany("PostTypeParent")
                        .HasForeignKey("PostTypeTblPostTypeId");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.PstTbl", b =>
                {
                    b.HasOne("DrTaabodi.Data.Models.PstTbl", null)
                        .WithMany("PstTblParent")
                        .HasForeignKey("PstTblPstId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostCategoryTblPstTbl", b =>
                {
                    b.HasOne("DrTaabodi.Data.Models.PostCategoryTbl", null)
                        .WithMany()
                        .HasForeignKey("PostCategoryTablePostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrTaabodi.Data.Models.PstTbl", null)
                        .WithMany()
                        .HasForeignKey("PostTablePstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostTypeTblPstTbl", b =>
                {
                    b.HasOne("DrTaabodi.Data.Models.PstTbl", null)
                        .WithMany()
                        .HasForeignKey("PostTablePstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrTaabodi.Data.Models.PostTypeTbl", null)
                        .WithMany()
                        .HasForeignKey("PostTypeTablePostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PstTblUsrTbl", b =>
                {
                    b.HasOne("DrTaabodi.Data.Models.PstTbl", null)
                        .WithMany()
                        .HasForeignKey("PostTablePstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrTaabodi.Data.Models.UsrTbl", null)
                        .WithMany()
                        .HasForeignKey("UserTableUsrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QnATblUsrTbl", b =>
                {
                    b.HasOne("DrTaabodi.Data.Models.QnATbl", null)
                        .WithMany()
                        .HasForeignKey("QuestionAndAnswerTableQnAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrTaabodi.Data.Models.UsrTbl", null)
                        .WithMany()
                        .HasForeignKey("UserTableUsrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.PostCategoryTbl", b =>
                {
                    b.Navigation("PostCategoryParent");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.PostTypeTbl", b =>
                {
                    b.Navigation("PostTypeParent");
                });

            modelBuilder.Entity("DrTaabodi.Data.Models.PstTbl", b =>
                {
                    b.Navigation("PstTblParent");
                });
#pragma warning restore 612, 618
        }
    }
}
